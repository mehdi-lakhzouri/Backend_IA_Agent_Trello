#!/usr/bin/env python3
"""
Agent d'analyse d'un ticket Trello sp√©cifique.

Ce script analyse un ticket Trello unique et cr√©e une session d'analyse
d√©di√©e dans la table 'analyse' avec le ticket analys√© dans la table 'tickets'.
"""

import sys
import os
import logging
from datetime import datetime
from typing import Dict, Any, Optional
import requests
from logging.handlers import RotatingFileHandler

# Ajouter le r√©pertoire racine au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.models.trello_models import Analyse, AnalyseBoard, Tickets


def setup_logging() -> logging.Logger:
    """
    Configure le syst√®me de logging avec rotation des fichiers.
    """
    # Cr√©er le r√©pertoire logs s'il n'existe pas
    logs_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'logs')
    os.makedirs(logs_dir, exist_ok=True)
    
    # Nom du fichier de log bas√© sur la date
    log_filename = f"agent_analyse_ticket_{datetime.now().strftime('%Y%m%d')}.log"
    log_filepath = os.path.join(logs_dir, log_filename)
    
    # Configuration du logger
    logger = logging.getLogger('agent_analyse_ticket')
    logger.setLevel(logging.DEBUG)
    
    # √âviter les doublons de handlers
    if logger.handlers:
        logger.handlers.clear()
    
    # Handler pour fichier avec rotation (max 10MB, 5 fichiers)
    file_handler = RotatingFileHandler(
        log_filepath, 
        maxBytes=10*1024*1024,  # 10MB
        backupCount=5,
        encoding='utf-8'
    )
    file_handler.setLevel(logging.DEBUG)
    
    # Handler pour console
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    
    # Format des logs
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger


# Initialiser le logger global
logger = setup_logging()


def generate_unique_ticket_reference(card_name: str, board_name: str, card_id: str, existing_info: Dict[str, Any]) -> str:
    """
    G√©n√®re une r√©f√©rence unique pour l'analyse d'un ticket.
    Format: ANALYSE_TICKET_[NOUVELLE|REANALYSE]-YYYYMMDD-XXX-[BOARD_NAME]-[CARD_ID]-[CARD_NAME]
    Pour les r√©analyses, inclut l'ID du ticket original pour tra√ßabilit√©
    """
    today = datetime.now().strftime('%Y%m%d')
    
    # Compter les analyses de tickets cr√©√©es aujourd'hui
    today_start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    today_analyses = Analyse.query.filter(
        Analyse.createdAt >= today_start,
        Analyse.reference.like('ANALYSE_TICKET_%')
    ).count()
    
    # Incr√©menter le compteur
    counter = today_analyses + 1
    
    # Nettoyer le nom du board (max 15 caract√®res)
    board_short_name = ''.join(c for c in board_name if c.isalnum() or c in ' -_')
    board_short_name = board_short_name.replace(' ', '-')[:15].upper()
    
    # Cr√©er un nom court bas√© sur le nom de la carte (max 15 caract√®res)
    card_short_name = ''.join(c for c in card_name if c.isalnum() or c in ' -_')
    card_short_name = card_short_name.replace(' ', '-')[:15].upper()
    
    # V√©rifier si ce ticket a d√©j√† √©t√© analys√© (pour indiquer REANALYSE)
    is_reanalysis = existing_info.get('exists', False)
    reanalyse_suffix = "REANALYSE" if is_reanalysis else "NOUVELLE"
    
    # Construire la r√©f√©rence avec l'ID du ticket pour tra√ßabilit√©
    if is_reanalysis:
        # Pour les r√©analyses, inclure l'ID du ticket original
        previous_ticket_id = existing_info.get('previous_ticket_id', 'UNKNOWN')
        reference = f"ANALYSE_TICKET_{reanalyse_suffix}-{today}-{counter:03d}-{board_short_name}-TKT{previous_ticket_id}-{card_id}-{card_short_name}"
        logger.info(f"üîÑ R√âANALYSE - Ticket original ID: {previous_ticket_id}")
    else:
        # Pour les nouvelles analyses
        reference = f"ANALYSE_TICKET_{reanalyse_suffix}-{today}-{counter:03d}-{board_short_name}-{card_id}-{card_short_name}"
    
    logger.debug(f"R√©f√©rence unique g√©n√©r√©e: {reference}")
    logger.info(f"Format: {reanalyse_suffix} - Board: {board_name} - Card: {card_id}")
    
    return reference


def check_existing_ticket_analysis(card_id: str) -> Dict[str, Any]:
    """
    V√©rifie si ce ticket a d√©j√† √©t√© analys√© et retourne les informations compl√®tes.
    R√©cup√®re TOUS les tickets analys√©s pour ce card_id pour un historique complet.
    """
    try:
        # Chercher tous les tickets avec ce card_id (original + r√©analyses)
        existing_tickets = Tickets.query.filter(
            Tickets.trello_ticket_id.like(f'{card_id}%')
        ).order_by(Tickets.createdAt.desc()).all()
        
        if existing_tickets:
            # Prendre le ticket le plus r√©cent comme r√©f√©rence
            latest_ticket = existing_tickets[0]
            
            # R√©cup√©rer l'analyse associ√©e au ticket le plus r√©cent
            analyse_board = db.session.get(AnalyseBoard, latest_ticket.analyse_board_id)
            analyse = None
            if analyse_board:
                analyse = db.session.get(Analyse, analyse_board.analyse_id)
            
            logger.info(f"üîç TICKET D√âJ√Ä ANALYS√â TROUV√â:")
            logger.info(f"   - Nombre total d'analyses: {len(existing_tickets)}")
            logger.info(f"   - Ticket ID le plus r√©cent: {latest_ticket.id_ticket}")
            logger.info(f"   - Analyse pr√©c√©dente: {analyse.reference if analyse else 'N/A'}")
            logger.info(f"   - Date pr√©c√©dente: {latest_ticket.createdAt}")
            logger.info(f"   - Criticit√© pr√©c√©dente: {latest_ticket.criticality_level}")
            
            # Afficher l'historique complet
            if len(existing_tickets) > 1:
                logger.info(f"üìö HISTORIQUE COMPLET ({len(existing_tickets)} analyses):")
                for i, ticket in enumerate(existing_tickets, 1):
                    ticket_board = db.session.get(AnalyseBoard, ticket.analyse_board_id)
                    ticket_analyse = None
                    if ticket_board:
                        ticket_analyse = db.session.get(Analyse, ticket_board.analyse_id)
                    
                    logger.info(f"   {i}. ID: {ticket.id_ticket} | "
                              f"Ref: {ticket_analyse.reference if ticket_analyse else 'N/A'} | "
                              f"Date: {ticket.createdAt.strftime('%Y-%m-%d %H:%M') if ticket.createdAt else 'N/A'} | "
                              f"Criticit√©: {ticket.criticality_level}")
            
            return {
                'exists': True,
                'previous_ticket_id': latest_ticket.id_ticket,
                'previous_reference': analyse.reference if analyse else 'N/A',
                'previous_date': latest_ticket.createdAt.isoformat() if latest_ticket.createdAt else None,
                'previous_criticality': latest_ticket.criticality_level,
                'total_analyses': len(existing_tickets),
                'all_tickets': [
                    {
                        'id': t.id_ticket,
                        'date': t.createdAt.isoformat() if t.createdAt else None,
                        'criticality': t.criticality_level
                    } for t in existing_tickets
                ]
            }
        
        logger.info("‚ú® NOUVEAU TICKET - Premi√®re analyse")
        return {'exists': False, 'total_analyses': 0}
        
    except Exception as e:
        logger.error(f"Erreur lors de la v√©rification du ticket existant: {str(e)}")
        return {'exists': False, 'total_analyses': 0}


def check_flask_server_running() -> bool:
    """
    V√©rifie si le serveur Flask est en cours d'ex√©cution.
    """
    try:
        logger.debug("V√©rification de l'√©tat du serveur Flask...")
        response = requests.get("http://localhost:5000/api/trello/config-board-subscription", timeout=5)
        is_running = response.status_code in [200, 404]
        
        if is_running:
            logger.info("Serveur Flask d√©tect√© et op√©rationnel")
        else:
            logger.warning(f"Serveur Flask non disponible (statut: {response.status_code})")
            
        return is_running
    except requests.exceptions.RequestException as e:
        logger.warning(f"Serveur Flask non disponible: {str(e)}")
        return False
    except Exception as e:
        logger.error(f"Erreur lors de la v√©rification du serveur Flask: {str(e)}")
        return False


def create_ticket_analyse_session(card_name: str, board_name: str, card_id: str, existing_info: Dict[str, Any]) -> Analyse:
    """
    Cr√©e une session d'analyse d√©di√©e pour un ticket sp√©cifique.
    """
    try:
        # G√©n√©rer une r√©f√©rence unique pour ce ticket
        reference = generate_unique_ticket_reference(card_name, board_name, card_id, existing_info)
        
        logger.info(f"Cr√©ation d'une session d'analyse pour le ticket: {card_name}")
        logger.info(f"Board: {board_name}")
        logger.info(f"R√©f√©rence: {reference}")
        
        # Cr√©er la session d'analyse
        analyse = Analyse(
            reference=reference,
            createdAt=datetime.now()
        )
        
        # Sauvegarder en base
        db.session.add(analyse)
        db.session.commit()
        
        logger.info(f"Session d'analyse cr√©√©e avec succ√®s: ID {analyse.analyse_id}")
        
        return analyse
        
    except Exception as e:
        logger.error(f"Erreur lors de la cr√©ation de la session d'analyse: {str(e)}")
        db.session.rollback()
        raise e


def create_analyse_board_for_ticket(analyse: Analyse, board_id: str, board_name: str) -> AnalyseBoard:
    """
    Cr√©e une entr√©e analyse_board pour le ticket analys√©.
    """
    try:
        logger.debug(f"Cr√©ation analyse_board pour board: {board_name}")
        
        analyse_board = AnalyseBoard(
            analyse_id=analyse.analyse_id,
            platform='trello',
            createdAt=datetime.now()
        )
        
        # Sauvegarder en base
        db.session.add(analyse_board)
        db.session.commit()
        
        logger.info(f"Analyse board cr√©√©e: ID {analyse_board.id} pour analyse '{analyse.reference}'")
        
        return analyse_board
        
    except Exception as e:
        logger.error(f"Erreur lors de la cr√©ation de l'analyse board: {str(e)}")
        db.session.rollback()
        raise e


def analyze_single_card_via_api(card_id: str, card_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Utilise l'API interne pour analyser une carte sp√©cifique.
    """
    try:
        card_name = card_data.get('name', 'N/A')
        
        logger.info(f"D√©but de l'analyse du ticket: {card_name}")
        logger.debug(f"Card ID: {card_id}")
        
        # V√©rifier d'abord que le serveur est disponible
        if not check_flask_server_running():
            error_msg = 'Serveur Flask non disponible - analyse du ticket impossible'
            logger.error(error_msg)
            return {
                'success': False,
                'error': error_msg
            }
        
        # URL de l'API pour analyser une carte unique
        api_url = f"http://localhost:5000/api/trello/card/{card_id}/analyze"
        
        logger.debug(f"Appel API: {api_url}")
        
        # Appel √† l'API
        response = requests.post(api_url, json=card_data, timeout=30)
        response.raise_for_status()
        
        result = response.json()
        
        logger.info(f"Analyse du ticket termin√©e avec succ√®s")
        logger.debug(f"R√©sultat: {result}")
        
        return {
            'success': True,
            'analysis_result': result
        }
            
    except requests.exceptions.RequestException as e:
        error_msg = f'Erreur de requ√™te API: {str(e)}'
        logger.error(error_msg)
        return {
            'success': False,
            'error': error_msg
        }
    except Exception as e:
        error_msg = f'Erreur lors de l\'analyse: {str(e)}'
        logger.error(error_msg)
        return {
            'success': False,
            'error': error_msg
        }


def save_ticket_to_database(analyse_board: AnalyseBoard, card_data: Dict[str, Any], analysis_result: Dict[str, Any], is_reanalysis: bool = False) -> Optional[Tickets]:
    """
    Sauvegarde le ticket analys√© dans la table tickets.
    Pour les r√©analyses, cr√©er un nouveau ticket avec un identifiant unique.
    """
    try:
        logger.info("Sauvegarde du ticket dans la base de donn√©es...")
        
        # Extraire les donn√©es d'analyse
        criticality_level = analysis_result.get('criticality_level', 'low')
        analysis_details = analysis_result.get('analysis_details', {})
        
        # Cr√©er les m√©tadonn√©es du ticket
        ticket_metadata = {
            'name': card_data.get('name'),
            'desc': card_data.get('desc', ''),
            'due': card_data.get('due'),
            'url': card_data.get('url'),
            'list_name': card_data.get('list_name'),
            'board_name': card_data.get('board_name'),
            'labels': card_data.get('labels', []),
            'members': card_data.get('members', []),
            'analysis_result': analysis_result,
            'is_reanalysis': is_reanalysis
        }
        
        # Pour les r√©analyses, cr√©er un identifiant unique
        trello_ticket_id = card_data.get('id')
        if is_reanalysis:
            # Ajouter un suffixe unique bas√© sur le timestamp
            timestamp_suffix = datetime.now().strftime('%Y%m%d_%H%M%S')
            trello_ticket_id = f"{card_data.get('id')}_reanalyse_{timestamp_suffix}"
            logger.info(f"üîÑ R√âANALYSE - Nouvel ID g√©n√©r√©: {trello_ticket_id}")
        
        # Cr√©er l'entr√©e ticket
        ticket = Tickets(
            analyse_board_id=analyse_board.id,
            trello_ticket_id=trello_ticket_id,
            ticket_metadata=ticket_metadata,
            criticality_level=criticality_level,
            createdAt=datetime.now()
        )
        
        # Sauvegarder en base
        db.session.add(ticket)
        db.session.commit()
        
        logger.info(f"Ticket sauvegard√© avec succ√®s: ID {ticket.id_ticket}")
        logger.info(f"Trello ID: {trello_ticket_id}")
        logger.info(f"Criticit√©: {criticality_level}")
        
        return ticket
        
    except Exception as e:
        logger.error(f"Erreur lors de la sauvegarde du ticket: {str(e)}")
        db.session.rollback()
        return None


def analyze_single_ticket(card_id: str, card_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Analyse un ticket Trello sp√©cifique et l'enregistre dans la base.
    """
    try:
        card_name = card_data.get('name', 'Ticket sans nom')
        board_id = card_data.get('board_id', '')
        board_name = card_data.get('board_name', 'Board inconnu')
        
        logger.info(f"D√©but de l'analyse compl√®te du ticket: {card_name}")
        logger.info(f"Board: {board_name}")
        logger.info(f"Card ID: {card_id}")
        
        # 0. V√©rifier si le ticket a d√©j√† √©t√© analys√©
        existing_info = check_existing_ticket_analysis(card_id)
        
        # 1. Cr√©er une session d'analyse d√©di√©e
        analyse = create_ticket_analyse_session(card_name, board_name, card_id, existing_info)
        
        # 2. Cr√©er l'analyse board
        analyse_board = create_analyse_board_for_ticket(analyse, board_id, board_name)
        
        # 3. Analyser le ticket via l'API
        analysis_api_result = analyze_single_card_via_api(card_id, card_data)
        
        if not analysis_api_result.get('success'):
            error_msg = analysis_api_result.get('error', 'Erreur lors de l\'analyse')
            logger.error(f"√âchec de l'analyse: {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'analyse_id': analyse.analyse_id,
                'reference': analyse.reference
            }
        
        # 4. Sauvegarder le ticket analys√©
        analysis_result = analysis_api_result.get('analysis_result', {})
        is_reanalysis = existing_info.get('exists', False)
        ticket = save_ticket_to_database(analyse_board, card_data, analysis_result, is_reanalysis)
        
        if not ticket:
            error_msg = "Erreur lors de la sauvegarde du ticket"
            logger.error(error_msg)
            return {
                'success': False,
                'error': error_msg,
                'analyse_id': analyse.analyse_id,
                'reference': analyse.reference
            }
        
        # 5. R√©sultat final
        result = {
            'success': True,
            'message': 'Ticket analys√© et sauvegard√© avec succ√®s',
            'analyse_id': analyse.analyse_id,
            'reference': analyse.reference,
            'analyse_board_id': analyse_board.id,
            'ticket_id': ticket.id_ticket,
            'card_id': card_id,
            'card_name': card_name,
            'board_name': board_name,
            'criticality_level': ticket.criticality_level,
            'analysis_result': analysis_result,
            'existing_ticket_info': existing_info,
            'is_reanalysis': existing_info.get('exists', False)
        }
        
        logger.info(f"Analyse compl√®te termin√©e avec succ√®s!")
        logger.info(f"R√©f√©rence analyse: {analyse.reference}")
        logger.info(f"Ticket ID: {ticket.id_ticket}")
        logger.info(f"Criticit√©: {ticket.criticality_level}")
        
        return result
        
    except Exception as e:
        error_msg = f"Erreur lors de l'analyse compl√®te: {str(e)}"
        logger.error(error_msg)
        return {
            'success': False,
            'error': error_msg
        }


def print_analysis_summary(result: Dict[str, Any]) -> None:
    """
    Affiche un r√©sum√© de l'analyse effectu√©e.
    """
    logger.info("=" * 60)
    logger.info("R√âSUM√â DE L'ANALYSE DU TICKET")
    logger.info("=" * 60)
    
    if result.get('success'):
        is_reanalysis = result.get('is_reanalysis', False)
        existing_info = result.get('existing_ticket_info', {})
        total_analyses = existing_info.get('total_analyses', 0)
        
        status_icon = f"üîÑ R√âANALYSE #{total_analyses + 1}" if is_reanalysis else "‚ú® NOUVELLE ANALYSE #1"
        
        logger.info(f"{status_icon} R√âUSSIE")
        logger.info(f"R√©f√©rence: {result.get('reference')}")
        logger.info(f"Nom du ticket: {result.get('card_name')}")
        logger.info(f"Board: {result.get('board_name')}")
        logger.info(f"Card ID Trello: {result.get('card_id', 'N/A')}")
        logger.info(f"Criticit√©: {result.get('criticality_level')}")
        logger.info(f"ID Analyse: {result.get('analyse_id')}")
        logger.info(f"ID Ticket: {result.get('ticket_id')}")
        
        # Afficher l'historique complet si c'est une r√©analyse
        if is_reanalysis and total_analyses > 0:
            logger.info("üóÇÔ∏è HISTORIQUE COMPLET DES ANALYSES:")
            all_tickets = existing_info.get('all_tickets', [])
            for i, ticket_info in enumerate(all_tickets, 1):
                logger.info(f"   {i}. Ticket ID: {ticket_info.get('id')} | "
                          f"Date: {ticket_info.get('date', 'N/A')[:16]} | "
                          f"Criticit√©: {ticket_info.get('criticality', 'N/A')}")
            logger.info(f"   {total_analyses + 1}. Ticket ID: {result.get('ticket_id')} | "
                      f"Date: NOUVELLE | "
                      f"Criticit√©: {result.get('criticality_level')}")
        
        analysis_details = result.get('analysis_result', {}).get('analysis_details', {})
        if analysis_details:
            logger.info("üìä D√âTAILS DE L'ANALYSE:")
            for key, value in analysis_details.items():
                logger.info(f"  {key}: {value}")
                
        # Message de tra√ßabilit√©
        if is_reanalysis:
            previous_ticket_id = existing_info.get('previous_ticket_id', 'N/A')
            logger.info(f"üîó TRA√áABILIT√â: Ce ticket fait r√©f√©rence au ticket original ID: {previous_ticket_id}")
            logger.info(f"üîç Pour consulter l'historique complet, recherchez tous les tickets avec Card ID: {result.get('card_id', 'N/A')}")
    else:
        logger.error(f"‚ùå √âCHEC DE L'ANALYSE")
        logger.error(f"Erreur: {result.get('error')}")
        if result.get('reference'):
            logger.info(f"R√©f√©rence cr√©√©e: {result.get('reference')}")


def main():
    """
    Fonction principale - EXEMPLE D'UTILISATION.
    Modifiez les donn√©es selon votre carte Trello.
    """
    logger.info("AGENT D'ANALYSE D'UN TICKET SP√âCIFIQUE")
    logger.info("=" * 50)
    
    # EXEMPLE DE DONN√âES DE CARTE - MODIFIEZ SELON VOS BESOINS
    card_id = "exemple_card_id_123"
    card_data = {
        "id": card_id,
        "name": "Corriger bug critique connexion utilisateur",
        "desc": "Bug critique emp√™chant la connexion des utilisateurs. Impact: tous les utilisateurs affect√©s. Priorit√© maximale.",
        "due": "2025-07-25T10:00:00Z",
        "list_name": "En cours",
        "board_id": "64a1b2c3d4e5f6789",
        "board_name": "D√©veloppement Application",
        "labels": [
            {"name": "urgent", "color": "red"},
            {"name": "bug", "color": "orange"}
        ],
        "members": [
            {"fullName": "John Doe", "username": "johndoe"}
        ],
        "url": "https://trello.com/c/abc123/corriger-bug-connexion"
    }
    
    logger.info(f"Analyse du ticket: {card_data['name']}")
    
    # V√©rifier que le serveur Flask est en cours d'ex√©cution
    logger.info("V√©rification du serveur Flask...")
    if not check_flask_server_running():
        logger.error("Le serveur Flask n'est pas en cours d'ex√©cution!")
        logger.error("D√©marrez le serveur avec 'python run.py' avant d'ex√©cuter ce script")
        sys.exit(1)

    # Cr√©er l'application Flask
    app = create_app()
    
    with app.app_context():
        try:
            # Analyser le ticket
            result = analyze_single_ticket(card_id, card_data)
            
            # Afficher le r√©sum√©
            print_analysis_summary(result)
            
            if result.get('success'):
                logger.info("Analyse termin√©e avec succ√®s!")
                logger.info(f"Vous pouvez consulter le ticket dans l'interface web avec l'analyse: {result.get('reference')}")
            else:
                logger.error("Analyse √©chou√©e!")
                sys.exit(1)
            
        except Exception as e:
            logger.error(f"Erreur fatale: {str(e)}")
            sys.exit(1)


if __name__ == "__main__":
    main()
