"""
Exemple d'utilisation du service de r√©analyse de tickets.
Ce fichier montre comment utiliser le service dans du code Python.
"""

from app.services.ticket_reanalysis_service import TicketReanalysisService
from app.models.trello_models import Config, Analyse, AnalyseBoard, Tickets
from app import create_app, db


def exemple_reanalyse_simple():
    """Exemple simple de r√©analyse d'un ticket."""
    
    # Cr√©er le contexte de l'application Flask
    app = create_app()
    
    with app.app_context():
        # Initialiser le service
        service = TicketReanalysisService()
        
        # ID du ticket √† r√©analyser (remplacez par un vrai ID)
        trello_ticket_id = "64f3a2b1c8e9d789"
        
        # R√©analyser le ticket avec la derni√®re configuration
        result = service.reanalyze_ticket(trello_ticket_id)
        
        if result['success']:
            print("‚úÖ R√©analyse r√©ussie!")
            print(f"Nouvelle analyse ID: {result['analysis']['analyse_id']}")
            print(f"Criticit√©: {result['ticket']['criticality_level']}")
        else:
            print(f"‚ùå Erreur: {result['error']}")


def exemple_reanalyse_avec_config():
    """Exemple de r√©analyse avec une configuration sp√©cifique."""
    
    app = create_app()
    
    with app.app_context():
        service = TicketReanalysisService()
        
        # R√©cup√©rer une configuration sp√©cifique
        config = Config.query.first()
        if not config:
            print("‚ùå Aucune configuration trouv√©e")
            return
        
        trello_ticket_id = "64f3a2b1c8e9d789"
        
        # R√©analyser avec cette configuration
        result = service.reanalyze_ticket(trello_ticket_id, config.id)
        
        if result['success']:
            print("‚úÖ R√©analyse avec configuration sp√©cifique r√©ussie!")
            print(f"Configuration utilis√©e: {result['config_used']['board_name']}")
        else:
            print(f"‚ùå Erreur: {result['error']}")


def exemple_historique_ticket():
    """Exemple de r√©cup√©ration de l'historique d'un ticket."""
    
    app = create_app()
    
    with app.app_context():
        service = TicketReanalysisService()
        
        trello_ticket_id = "64f3a2b1c8e9d789"
        
        # R√©cup√©rer l'historique
        result = service.get_ticket_reanalysis_history(trello_ticket_id)
        
        if result['success']:
            print(f"üìö Historique du ticket {trello_ticket_id}:")
            print(f"Total d'analyses: {result['total_analyses']}")
            
            for i, analysis in enumerate(result['history'][:3]):  # Afficher les 3 premi√®res
                print(f"\n{i+1}. Analyse ID: {analysis['id_ticket']}")
                print(f"   Criticit√©: {analysis['criticality_level']}")
                print(f"   Date: {analysis['created_at']}")
                print(f"   R√©analyse: {'Oui' if analysis['is_reanalysis'] else 'Non'}")
        else:
            print(f"‚ùå Erreur: {result['error']}")


def exemple_reanalyse_lot():
    """Exemple de r√©analyse de plusieurs tickets en lot."""
    
    app = create_app()
    
    with app.app_context():
        service = TicketReanalysisService()
        
        # Liste des tickets √† r√©analyser
        ticket_ids = [
            "64f3a2b1c8e9d789",
            "64f3a2b1c8e9d790",
            "64f3a2b1c8e9d791"
        ]
        
        results = []
        
        print("üîÑ R√©analyse en lot...")
        for ticket_id in ticket_ids:
            print(f"  Traitement du ticket {ticket_id}...")
            
            result = service.reanalyze_ticket(ticket_id)
            results.append({
                'ticket_id': ticket_id,
                'success': result['success'],
                'criticality': result.get('ticket', {}).get('criticality_level') if result['success'] else None,
                'error': result.get('error') if not result['success'] else None
            })
        
        # Afficher les r√©sultats
        print("\nüìä R√©sultats de la r√©analyse en lot:")
        successful = 0
        for result in results:
            if result['success']:
                successful += 1
                print(f"‚úÖ {result['ticket_id']}: {result['criticality']}")
            else:
                print(f"‚ùå {result['ticket_id']}: {result['error']}")
        
        print(f"\nüéØ {successful}/{len(results)} tickets r√©analys√©s avec succ√®s")


def exemple_comparaison_analyses():
    """Exemple de comparaison entre analyses d'un m√™me ticket."""
    
    app = create_app()
    
    with app.app_context():
        service = TicketReanalysisService()
        
        trello_ticket_id = "64f3a2b1c8e9d789"
        
        # R√©cup√©rer l'historique
        history_result = service.get_ticket_reanalysis_history(trello_ticket_id)
        
        if not history_result['success'] or len(history_result['history']) < 2:
            print("‚ùå Pas assez d'analyses pour faire une comparaison")
            return
        
        analyses = history_result['history']
        latest = analyses[0]
        previous = analyses[1]
        
        print(f"üîç Comparaison des analyses pour le ticket {trello_ticket_id}:")
        print(f"\nüìä Analyse la plus r√©cente:")
        print(f"   Date: {latest['created_at']}")
        print(f"   Criticit√©: {latest['criticality_level']}")
        print(f"   R√©analyse: {'Oui' if latest['is_reanalysis'] else 'Non'}")
        
        print(f"\nüìä Analyse pr√©c√©dente:")
        print(f"   Date: {previous['created_at']}")
        print(f"   Criticit√©: {previous['criticality_level']}")
        print(f"   R√©analyse: {'Oui' if previous['is_reanalysis'] else 'Non'}")
        
        # Analyser l'√©volution
        if latest['criticality_level'] != previous['criticality_level']:
            print(f"\nüîÑ √âvolution d√©tect√©e:")
            print(f"   {previous['criticality_level']} ‚Üí {latest['criticality_level']}")
            
            # D√©terminer si c'est une am√©lioration ou d√©gradation
            criticality_order = {'low': 1, 'medium': 2, 'high': 3}
            latest_score = criticality_order.get(latest['criticality_level'], 0)
            previous_score = criticality_order.get(previous['criticality_level'], 0)
            
            if latest_score > previous_score:
                print("   üìà D√©gradation de la criticit√©")
            elif latest_score < previous_score:
                print("   üìâ Am√©lioration de la criticit√©")
        else:
            print(f"\nüü∞ Aucun changement de criticit√©")


def exemple_gestion_erreurs():
    """Exemple de gestion des erreurs lors de la r√©analyse."""
    
    app = create_app()
    
    with app.app_context():
        service = TicketReanalysisService()
        
        # Tenter de r√©analyser un ticket inexistant
        fake_ticket_id = "ticket_inexistant_12345"
        
        print(f"üß™ Test avec un ticket inexistant: {fake_ticket_id}")
        result = service.reanalyze_ticket(fake_ticket_id)
        
        if not result['success']:
            error_code = result.get('error_code', 'UNKNOWN')
            print(f"‚ùå Erreur attendue: {error_code}")
            print(f"   Message: {result['error']}")
            
            # Gestion sp√©cifique selon le type d'erreur
            if error_code == 'TRELLO_API_ERROR':
                print("üí° Suggestion: V√©rifiez que le ticket existe sur Trello")
            elif error_code == 'NO_CONFIG':
                print("üí° Suggestion: Cr√©ez d'abord une configuration Trello")
            elif error_code == 'NO_TOKEN':
                print("üí° Suggestion: V√©rifiez que le token Trello est configur√©")
        else:
            print("ü§î R√©sultat inattendu - le ticket semble exister")


def main():
    """Fonction principale d'exemple."""
    print("üöÄ Exemples d'utilisation du service de r√©analyse")
    print("=" * 60)
    
    try:
        print("\n1. R√©analyse simple")
        print("-" * 30)
        exemple_reanalyse_simple()
        
        print("\n2. R√©analyse avec configuration sp√©cifique")
        print("-" * 30)
        exemple_reanalyse_avec_config()
        
        print("\n3. Historique d'un ticket")
        print("-" * 30)
        exemple_historique_ticket()
        
        print("\n4. R√©analyse en lot")
        print("-" * 30)
        exemple_reanalyse_lot()
        
        print("\n5. Comparaison d'analyses")
        print("-" * 30)
        exemple_comparaison_analyses()
        
        print("\n6. Gestion des erreurs")
        print("-" * 30)
        exemple_gestion_erreurs()
        
    except Exception as e:
        print(f"‚ùå Erreur lors des exemples: {str(e)}")
        import traceback
        traceback.print_exc()
    
    print("\n‚úÖ Exemples termin√©s!")


if __name__ == "__main__":
    main()
