"""
Service d'analyse de criticit√© des cards Trello utilisant l'API Gemini.
"""

import os
import google.generativeai as genai
from flask import current_app
from typing import Dict, List, Any
import json
from app.database.chroma import ChromaDBManager


class CriticalityAnalyzer:
    """Analyse la criticit√© des cards Trello en utilisant Gemini 1.5 Flash."""
    
    def __init__(self):
        """Initialise le service avec la configuration Gemini."""
        api_key = os.environ.get('GOOGLE_API_KEY')
        if not api_key:
            raise ValueError("GOOGLE_API_KEY non configur√©e")
        
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-2.5-flash')
        self.chroma_manager = ChromaDBManager()
        
    def _get_application_context(self) -> str:
        """
        R√©cup√®re le contexte de l'application depuis les documents upload√©s.
        """
        try:
            # R√©cup√©rer tous les documents upload√©s dans ChromaDB
            # En cherchant par m√©tadonn√©es des fichiers upload√©s
            collection = self.chroma_manager.get_collection()
            
            # R√©cup√©rer tous les documents (chunks) stock√©s
            results = collection.get(
                include=['documents', 'metadatas']
            )
            
            if not results or not results.get('documents'):
                current_app.logger.warning("Aucun document trouv√© dans ChromaDB")
                return self._get_default_context()
            
            # Grouper les chunks par fichier original
            files_content = {}
            documents = results.get('documents', [])
            metadatas = results.get('metadatas', [])
            
            # Ensure documents and metadatas are lists, not None
            if documents is None:
                documents = []
            if metadatas is None:
                metadatas = []

            for i, content in enumerate(documents):
                if i < len(metadatas):
                    metadata = metadatas[i] if metadatas[i] is not None else {}
                    filename = metadata.get('filename', 'unknown')
                    document_id = metadata.get('document_id')
                    chunk_index = metadata.get('chunk_index', 0)
                    
                    if document_id not in files_content:
                        files_content[document_id] = {
                            'filename': filename,
                            'chunks': []
                        }
                    
                    files_content[document_id]['chunks'].append({
                        'index': chunk_index,
                        'content': content
                    })
            
            # Reconstituer le contenu complet de chaque fichier
            context_parts = []
            for doc_id, file_info in files_content.items():
                # Trier les chunks par index et reconstituer le contenu
                sorted_chunks = sorted(file_info['chunks'], key=lambda x: x['index'])
                full_content = '\n'.join([chunk['content'] for chunk in sorted_chunks])
                
                # Ajouter le nom du fichier et son contenu
                context_parts.append(f"=== FICHIER: {file_info['filename']} ===\n{full_content}")
            
            if context_parts:
                current_app.logger.info(f"Contexte r√©cup√©r√© depuis {len(files_content)} fichiers upload√©s")
                return "\n\n".join(context_parts)
            else:
                return self._get_default_context()
                
        except Exception as e:
            current_app.logger.error(f"Erreur lors de la r√©cup√©ration du contexte: {str(e)}")
            return self._get_default_context()
    
    def _get_similar_cards_context(self, card_data: Dict[str, Any]) -> str:
        """
        R√©cup√®re des cards similaires pr√©c√©demment analys√©es pour am√©liorer la d√©cision.
        """
        try:
            # Construire une requ√™te bas√©e sur le nom et la description de la card
            search_text = f"{card_data.get('name', '')} {card_data.get('desc', '')}"
            
            # Rechercher des cards similaires
            results = self.chroma_manager.similarity_search(search_text, k=3)
            
            similar_cards = []
            for result in results:
                # V√©rifier si c'est un r√©sultat de card analys√©e (contient des m√©tadonn√©es sp√©cifiques)
                if result.get('metadata') and 'criticality_level' in str(result.get('content', '')):
                    similar_cards.append(result['content'])
            
            if similar_cards:
                return "\n\n".join(similar_cards)
            else:
                return "Aucune card similaire trouv√©e dans l'historique."
                
        except Exception as e:
            current_app.logger.warning(f"Erreur lors de la r√©cup√©ration des cards similaires: {str(e)}")
            return "Historique des cards non disponible."
    
    def _get_default_context(self) -> str:
        """Contexte par d√©faut si aucun document n'est trouv√©."""
        return """
        Cette application est un syst√®me de gestion de projets avec analyse intelligente des t√¢ches.
        L'application permet de suivre l'avancement des projets, identifier les blocages,
        et prioriser les t√¢ches selon leur impact business et technique.
        Les crit√®res de criticit√© incluent l'impact sur les utilisateurs, les d√©lais,
        les d√©pendances techniques et la valeur business.
        """
    
    def _build_criticality_prompt(self, card_data: Dict[str, Any], app_context: str, similar_cards: str) -> str:
        """
        Construit le prompt pour l'analyse de criticit√©.
        
        Args:
            card_data: Donn√©es de la card Trello
            app_context: Contexte de l'application depuis les documents upload√©s
            similar_cards: Cards similaires pr√©c√©demment analys√©es
            
        Returns:
            Prompt format√© pour Gemini
        """
        return f"""
Tu es un Product Owner expert avec une approche TR√àS S√âV√àRE dans l'analyse de criticit√© des t√¢ches.

CONTEXTE DE L'APPLICATION (Extrait des fichiers upload√©s):
{app_context}

HISTORIQUE DES CARDS SIMILAIRES ANALYS√âES:
{similar_cards}

CARD √Ä ANALYSER:
- Titre: {card_data.get('name', 'N/A')}
- Description: {card_data.get('desc', 'Aucune description')}
- Labels: {', '.join([label.get('name', '') for label in card_data.get('labels', [])])}
- Date d'√©ch√©ance: {card_data.get('due', 'Aucune')}
- Liste: {card_data.get('list_name', 'N/A')}
- Membres: {', '.join([member.get('fullName', '') for member in card_data.get('members', [])])}

√âTAPE 1 - V√âRIFICATION DE CONTEXTE:
Si cette card concerne une application diff√©rente ou un projet sans rapport avec le contexte fourni, r√©ponds EXACTEMENT: "HORS_CONTEXTE"

√âTAPE 2 - ANALYSE DE CRITICIT√â (APPROCHE TR√àS S√âV√àRE):
Une t√¢che est consid√©r√©e comme CRITIQUE uniquement si elle r√©pond √† UN ou PLUSIEURS de ces crit√®res STRICTS:

üî¥ CRIT√àRES CRITIQUES ABSOLUS:
- L'application ou une fonctionnalit√© PRINCIPALE devient inutilisable
- Perte ou corruption de donn√©es importantes
- Faille de s√©curit√© ou exposition de donn√©es sensibles
- Impact financier direct et imm√©diat (perte de revenus)
- Non-respect de r√©glementations critiques
- Application en panne ou inaccessible en production

‚ùå NE SONT G√âN√âRALEMENT PAS CRITIQUES (sauf exception majeure):
- Am√©liorations esth√©tiques (design, couleurs, logos)
- Optimisations de performance mineures
- Documentation et guides utilisateur
- Nouvelles fonctionnalit√©s (m√™me importantes)
- Corrections de bugs mineurs sans impact majeur
- T√¢ches de maintenance pr√©ventive
- Refactoring et nettoyage de code

√âTAPE 3 - NIVEAUX DE CRITICIT√â (uniquement si critique):
- HIGH: Impact imm√©diat sur l'utilisation en production
- MEDIUM: Fonctionnalit√© importante affect√©e mais contournement possible
- LOW: Impact limit√© mais n√©cessite correction

PROCESSUS DE D√âCISION EN 2 √âTAPES:
1. Cette t√¢che emp√™che-t-elle le bon fonctionnement PRINCIPAL de l'application ? OUI/NON
2. Si OUI, quel est le niveau d'impact ? HIGH/MEDIUM/LOW

IMPORTANT: Sois TR√àS S√âLECTIF. La majorit√© des t√¢ches (80-90%) ne sont PAS critiques.

FORMAT DE R√âPONSE OBLIGATOIRE:
- "HORS_CONTEXTE" si hors contexte
- "NON" si pas critique (cas le plus fr√©quent)
- "OUI HIGH" si critique impact majeur
- "OUI MEDIUM" si critique impact mod√©r√©
- "OUI LOW" si critique impact limit√©

Analyse maintenant cette card:
"""

    def analyze_card_criticality(self, card_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Analyse la criticit√© d'une card Trello.
        
        Args:
            card_data: Donn√©es de la card √† analyser
            
        Returns:
            R√©sultat de l'analyse avec le niveau de criticit√©
        """
        try:
            # R√©cup√©rer le contexte de l'application depuis les documents upload√©s
            app_context = self._get_application_context()
            
            # V√©rifier s'il y a des documents upload√©s
            if not app_context or app_context.strip() == "" or app_context == self._get_default_context():
                return {
                    'card_id': card_data.get('id'),
                    'card_name': card_data.get('name'),
                    'is_critical': False,
                    'criticality_level': 'NO_CONTEXT',
                    'raw_response': "Veuillez uploader un document de description",
                    'analyzed_at': None,
                    'success': True
                }
            
            # R√©cup√©rer des cards similaires pr√©c√©demment analys√©es
            similar_cards = self._get_similar_cards_context(card_data)
            
            # Construire le prompt avec contexte enrichi
            prompt = self._build_criticality_prompt(card_data, app_context, similar_cards)
            
            # Analyser avec Gemini
            response = self.model.generate_content(prompt)
            response_text = response.text.strip().upper()
            
            # V√©rifier d'abord si la card est hors contexte
            if 'HORS_CONTEXTE' in response_text or 'HORS CONTEXTE' in response_text:
                return {
                    'card_id': card_data.get('id'),
                    'card_name': card_data.get('name'),
                    'is_critical': False,
                    'criticality_level': 'HORS_CONTEXTE',
                    'raw_response': "D√©sol√©, je peux vous r√©pondre que selon le contexte de votre document upload√©.",
                    'analyzed_at': None,
                    'success': True
                }
            
            # Parser la r√©ponse OUI/NON + niveau
            is_critical = False
            criticality_level = 'NON'
            
            if response_text.startswith('OUI'):
                is_critical = True
                if 'HIGH' in response_text:
                    criticality_level = 'HIGH'
                elif 'MEDIUM' in response_text:
                    criticality_level = 'MEDIUM'
                elif 'LOW' in response_text:
                    criticality_level = 'LOW'
                else:
                    # Si OUI mais pas de niveau sp√©cifi√©, par d√©faut MEDIUM
                    criticality_level = 'MEDIUM'
            elif response_text == 'NON':
                is_critical = False
                criticality_level = 'NON'
            else:
                # Fallback pour r√©ponses inattendues
                current_app.logger.warning(f"R√©ponse inattendue de Gemini: {response_text}")
                # Essayer de parser quand m√™me
                if any(level in response_text for level in ['HIGH', 'MEDIUM', 'LOW']):
                    is_critical = True
                    if 'HIGH' in response_text:
                        criticality_level = 'HIGH'
                    elif 'MEDIUM' in response_text:
                        criticality_level = 'MEDIUM'
                    else:
                        criticality_level = 'LOW'
                else:
                    is_critical = False
                    criticality_level = 'NON'
            
            result = {
                'card_id': card_data.get('id'),
                'card_name': card_data.get('name'),
                'is_critical': is_critical,
                'criticality_level': criticality_level,
                'raw_response': response_text,
                'analyzed_at': None,  # Sera ajout√© par la route
                'success': True
            }
            
            # Sauvegarder l'analyse dans ChromaDB pour l'historique
            self._save_analysis_to_history(card_data, result)
            
            return result
            
        except Exception as e:
            current_app.logger.error(f"Erreur lors de l'analyse de criticit√©: {str(e)}")
            return {
                'card_id': card_data.get('id'),
                'card_name': card_data.get('name'),
                'is_critical': False,
                'criticality_level': 'NON',  # Valeur par d√©faut en cas d'erreur
                'error': str(e),
                'success': False
            }
    
    def _save_analysis_to_history(self, card_data: Dict[str, Any], analysis_result: Dict[str, Any]):
        """
        Sauvegarde l'analyse dans ChromaDB pour cr√©er un historique.
        """
        try:
            # Cr√©er un document d'historique
            history_text = f"""
CARD ANALYS√âE: {card_data.get('name', 'N/A')}
DESCRIPTION: {card_data.get('desc', 'Aucune')}
LABELS: {', '.join([label.get('name', '') for label in card_data.get('labels', [])])}
R√âSULTAT: {analysis_result['criticality_level']}
CRITIQUE: {'OUI' if analysis_result['is_critical'] else 'NON'}
BOARD: {card_data.get('board_name', 'N/A')}
            """.strip()
            
            # M√©tadonn√©es pour retrouver facilement
            metadata = {
                'type': 'card_analysis',
                'card_id': card_data.get('id'),
                'board_id': card_data.get('board_id'),
                'criticality_level': analysis_result['criticality_level'],
                'is_critical': analysis_result['is_critical']
            }
            
            # Sauvegarder dans ChromaDB
            self.chroma_manager.store_documents([{
                'content': history_text,
                'metadata': metadata
            }])
            
        except Exception as e:
            current_app.logger.warning(f"Erreur lors de la sauvegarde de l'historique: {str(e)}")
            # Ne pas faire √©chouer l'analyse si la sauvegarde √©choue
